# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        def find(spread_groups, i):
            while i != spread_groups[i]:
                spread_groups[i] = spread_groups[spread_groups[i]]
                i = spread_groups[i]
            
            return i
        
        n = len(graph)
        spread_groups = [i for i in range(n)]
        group_sizes = [1]*n

        for i in range(n):
            for j in range(i+1, n):
                if graph[i][j] != 1 :
                    continue
                    
                g_i = find(spread_groups, i)
                g_j = find(spread_groups, j)

                if g_i != g_j:
                    spread_groups[g_i] = spread_groups[g_j]
                    group_sizes[g_j] += group_sizes[g_i]
        
        initial.sort()
        _max = (initial[0], inf)
        for node1 in initial:
            infected = set()
            infected_count = 0
            for node2 in initial:
                if node1 == node2:
                    continue

                group = find(spread_groups, node2)
                if group not in infected:
                    infected_count += group_sizes[group]
                    infected.add(group)

            if _max[-1] > infected_count:
                _max = node1, infected_count

        return _max[0]